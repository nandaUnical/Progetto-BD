1. hiveserver2 (on a screen session)
2. beeline -u jdbc:hive2://master:10000
3. show databases;

4.(Create and use a database)
create database h_input;
use h_input;

(import data from mysql with sqoop)


5. (Data Cleaning)

-----(Create a new database to save the clean data)-----
Create database bigdata;

-----(Count rows, columns and distinct values)-----

select count(*) from h_train; (3000888)
select count(*) from h_test; (28512)
select count(*) from h_oil; (1218)
select count(*) from h_stores; (54)

DESCRIBE FORMATTED h_input.h_oil; (detailed info)
describe h_input.h_oil; (columns and types)

describe h_input.h_train; (6)
describe h_input.h_test; (5)
describe h_input.h_oil; (2)
describe h_input.h_stores; (5)

select count(distinct id) from h_train; (3000888) (No duplicated id)
select count(distinct family) from h_train;(33) (amount families)
select count(distinct store_nbr) from h_train; (54) (check if there is 54 distincts stores)
select count(store_nbr) from h_train where store_nbr not between 1 and 54; (0) (check if the stores_nbr are from 1 to 54)

select count(distinct id) from h_test; (28512) (No duplicates)
select count(distinct family) from h_test; (33) (check if all families are present, should be 33)

select count(distinct day) from h_oil; (1218) (No duplicates)
(no entry for every day: shold be 1705)

select count(distinct store_nbr) from h_stores; (54) (No duplicates)
select count(distinct cluster) from h_stores; (17) (differents clusters)
select count(distinct city) from stores; (22) (differents cities)

-----(Remove duplicates)-----
(no duplicates in the columns I assume as primary key)

-----(Missing Values)-----
select * from h_oil where dcoilwtico =''; (43)

select * from h_stores where city ='';(0)
select * from h_stores where state ='';(0)
select * from h_stores where type ='';(0)
select * from h_stores where cluster ='';(0)

select * from h_test where day ='';(0)
select * from h_test where store_nbr ='';(0)
select * from h_test where family ='';(0)
select * from h_test where onpromotion ='';(0)

select * from h_train where day ='';(0)
select * from h_train where store_nbr ='';(0)
select * from h_train where family ='';(0)
select * from h_train where sales ='';(0)
select * from h_train where onpromotion ='';(0)

-----(Convert to lower some columns)-----
select lower(family) as family_min from h_train;
select lower(family) as family_min from h_test;
select lower(city) as city_min from h_stores;
select lower(state) as state_min from h_stores;

-----(Check dates format)-----
select day from h_train where not day REGEXP '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; (0)(format correct)
select day from h_train where case when cast(day as TIMESTAMP) not NULL then 1 else 0 end = 1; (0) (all of them valid dates)

-----(Select dates to remove from train due to the earthquake)----
select count(day) as Rdates from h_train where day not like '2016-04%' and day not like '2016-05%'; (remove 108.702 rows)

-----(Create new tables with clean data)-----

(create oil table without NULL values and with the real types)
create table bigdata.oil row format delimited fields terminated by ',' lines terminated by '\n' as select CAST(day as date) as day, CAST(dcoilwtico as float) as dcoilwtico from h_oil where dcoilwtico <> '';
use bigdata;
describe oil;
select count(*) from oil; (1175)

(create stores table with real types and string as lower case)
create table bigdata.stores row format delimited fields terminated by ',' lines terminated by '\n' as select CAST(store_nbr as int) as store_nbr, LOWER(CAST(city as string)) as city, LOWER(CAST(state as string)) as state, LOWER(CAST(type as string)) as type, CAST(cluster as int) as cluster from h_stores;
use bigdata;
describe stores;
select count(*) from stores; (54)

(create train table with real types and string as lower case without some dates)
create table bigdata.train row format delimited fields terminated by ',' lines terminated by '\n' as select CAST(id as int) as id, CAST(day as date) as day, CAST(store_nbr as int) as store_nbr, LOWER(CAST(family as string)) as family, CAST(sales as float) as sales, CAST(onpromotion as int) as onpromotion from h_train where day not like '2016-04%' and day not like '2016-05%';
use bigdata;
describe train;
select count(*) from train; (2892186)

(create test table with real types and string as lower case)
create table bigdata.test row format delimited fields terminated by ',' lines terminated by '\n' as select CAST(id as int) as id, CAST(day as date) as day, CAST(store_nbr as int) as store_nbr, LOWER(CAST(family as string)) as family, CAST(onpromotion as int) as onpromotion from h_test;
use bigdata;
describe test;
select count(*) from test; (28512)


6.(Save data as .csv in the hdfs)

insert overwrite directory '/data_clean/oil' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' SELECT * FROM oil;
hdfs dfs -mv /data_clean/oil/000000_0 /data_clean/oil.csv
hdfs dfs -rm -r /data_clean/oil

insert overwrite directory '/data_clean/stores' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' SELECT * FROM stores;
hdfs dfs -mv /data_clean/stores/000000_0 /data_clean/stores.csv
hdfs dfs -rm -r /data_clean/stores

insert overwrite directory '/data_clean/train' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' SELECT * FROM train;
hdfs dfs -mv /data_clean/train/000000_0 /data_clean/train.csv
hdfs dfs -rm -r /data_clean/train

insert overwrite directory '/data_clean/test' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' SELECT * FROM test;
hdfs dfs -mv /data_clean/test/000000_0 /data_clean/test.csv
hdfs dfs -rm -r /data_clean/test


6. (Some queries on the data)

use bigdata;

create temporary table stores_sales select t.store_nbr as store, sum(t.sales) as total_sales from train as t inner join stores as s on t.store_nbr = s.store_nbr where YEAR(t.day)=2016 group by t.store_nbr having sum(t.sales)>8000000.0;

(Amount of stores that have X total_sales in Y year)
select s.city, count(st.store) from store_sales as st inner join stores as s on st.store = s.store_nbr group by s.city;

(Amount of stores from the same cluster that have X total_sales in a Y year)
select s.cluster, count(st.store) from store_sales as st inner join stores as s on st.store = s.store_nbr group by s.cluster;

(The average price of oil in the month with the highest sales for each store per year)
create temporary table max_sales as select store_nbr as store, SUM(sales) as total_sales, MONTH(day) as month, YEAR(day) as year from train group by store_nbr,MONTH(day),YEAR(day);
create temporary table avg_oil_price as select AVG(dcoilwtico) as avg_price, MONTH(day) as month, YEAR(day) as year from oil group by MONTH(day),YEAR(day) as year;
select t1.store, MAX(t2.avg_price) as average_oil_price,t1.year from max_sales as t1 inner join avg_oil_price as t2 on t1.month=t2.month and t1.year=t2.year group by t1.store,t1.year;
